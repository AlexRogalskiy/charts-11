
# Flag to control whether to run initialize job
initialize: true

###
### K8S Settings
###

## Namespace to deploy pulsar
# NOTE: Make the default namespace as empty. So it will fallback to use the namespace used for installing the helm
#       chart. Helm does not position it self as a namespace manager, as namespaces in kubernetes are considered as
#       a higher control structure that is not part of the application.
namespace: "zxccc"
namespaceCreate: false

###
### Global Settings
###

## Pulsar Metadata Prefix
##
## By default, pulsar stores all the metadata at root path.
## You can configure to have a prefix (e.g. "/my-pulsar-cluster").
## If you do so, all the pulsar and bookkeeper metadata will
## be stored under the provided path
metadataPrefix: ""

## Persistence
##
## If persistence is enabled, components that have state will
## be deployed with PersistentVolumeClaims, otherwise, for test
## purposes, they will be deployed with emptyDir
##
## This is a global setting that is applied to all components.
## If you need to disable persistence for a component,
## you can set the `volume.persistence` setting to `false` for
## that component.
volumes:
  persistence: true
  # configure the components to use local persistent volume
  # the local provisioner should be installed prior to enable local persistent volume
  local_storage: false

## AntiAffinity
##
## Flag to enable and disable `AntiAffinity` for all components.
## This is a global setting that is applied to all components.
## If you need to disable AntiAffinity for a component, you can set
## the `affinity.anti_affinity` settings to `false` for that component.
affinity:
  anti_affinity: true

## Components
##
## Control what components of Apache Pulsar to deploy for the cluster
components:
  # zookeeper
  zookeeper: true
  # bookkeeper
  bookkeeper: true
  # bookkeeper - autorecovery
  autorecovery: true
  # broker
  broker: true
  # functions
  functions: false
  # proxy
  proxy: true
  # kop
  kop: false
  # aop
  aop: false

## Images
##
## Control what images to use for each component
images:
  zookeeper:
    repository: streamnative/sn-platform
    tag: "2.8.1.4"
    pullPolicy: IfNotPresent
  bookie:
    repository: streamnative/sn-platform
    tag: "2.8.1.4"
    pullPolicy: IfNotPresent
  autorecovery:
    repository: streamnative/sn-platform
    tag: "2.8.1.4"
    pullPolicy: IfNotPresent
  broker:
    repository: streamnative/sn-platform
    tag: "2.8.1.5-oauth2"
    pullPolicy: IfNotPresent
  proxy:
    repository: streamnative/sn-platform
    tag: "2.8.1.5-oauth2"
    pullPolicy: IfNotPresent

## TLS
## templates/tls-certs.yaml
##
## The chart is using cert-manager for provisioning TLS certs for
## brokers and proxies.
tls:
  enabled: false
  # common settings for generating certs
  common:
    # 90d
    duration: 2160h
    # 15d
    renewBefore: 360h
    organization:
      - pulsar
    keySize: 4096
    keyAlgorithm: rsa
    keyEncoding: pkcs8
  # settings for generating certs for proxy
  proxy:
    enabled: false
    cert_name: tls-proxy
    untrustedCa: true
  # settings for generating certs for proxy
  pulsar_detector:
    enabled: false
    cert_name: tls-pulsar-detector
  # settings for generating certs for broker
  broker:
    enabled: false
    cert_name: tls-broker
  # settings for generating certs for bookies
  bookie:
    enabled: false
    cert_name: tls-bookie
  # settings for generating certs for zookeeper
  zookeeper:
    enabled: false
    cert_name: tls-zookeeper
  # settings for generating certs for recovery
  autorecovery:
    cert_name: tls-recovery
  # settings for generating certs for toolset
  toolset:
    cert_name: tls-toolset
  presto:
    enabled: false
    cert_name: tls-presto
  streamnative_console:
    enabled: false
    cert_name: tls-streamnative_console

# Enable or disable broker authentication and authorization.
auth:
  authentication:
    enabled: false
    provider: "jwt"
    jwt:
      # Enable JWT authentication
      # If the token is generated by a secret key, set the usingSecretKey as true.
      # If the token is generated by a private key, set the usingSecretKey as false.
      usingSecretKey: false
  authorization:
    enabled: false
  superUsers:
    # broker to broker communication
    broker: "broker-admin"
    # proxy to broker communication
    proxy: "proxy-admin"
    # websocket proxy to broker communication
    websocket: "ws-admin"
    # pulsar-admin client to broker/proxy communication
    client: "admin"
    # streamnative-console
    streamnative-console: "super"
  # Enable vault based authentication
  vault:
    enabled: false
  oauth:
    enabled: false
    oauthIssuerUrl: "https://login.microsoftonline.com/your-tenant-id/v2.0"
    oauthAudience: "your-application-id"
    oauthSubjectClaim: "oid"
    oauthScopeClaim: "scp"
    oauthAuthzRoleClaim: "roles"
    # The name of the role when creating the application
    oauthAuthzAdminRole: ""
    # brokerClientCredential: ""
    # brokerClientAuthenticationPlugin: org.apache.pulsar.client.impl.auth.oauth2.AuthenticationOAuth2
    # brokerClientAuthenticationParameters: ""
    authenticationProvider: "io.streamnative.pulsar.broker.authentication.AuthenticationProviderOAuth"
    authorizationProvider: "io.streamnative.pulsar.broker.authorization.AuthorizationProviderOAuth"

## Domain requested from External DNS
domain:
  enabled: false
  suffix: test.pulsar.example.local

imagePuller:
  component: image-puller
  pullSecret:
    enabled: false
  hook:
    enabled: false
    image:
      name: streamnative/k8s-image-awaiter
      tag: '0.1.0'
  rbac:
    enabled: true
  continuous:
    enabled: false
  pause:
    image:
      name: gcr.io/google_containers/pause
      tag: '3.1'


######################################################################
# Below are settings for each component
######################################################################

## Common properties applied to pulsar components
common:
  extraInitContainers: []

## Pulsar: Zookeeper cluster
## templates/zookeeper-statefulset.yaml
##
zookeeper:
  # use a component name that matches your grafana configuration
  # so the metrics are correctly rendered in grafana dashboard
  component: zookeeper
  # the number of zookeeper servers to run. it should be an odd number larger than or equal to 3.
  replicaCount: 3
  updateStrategy: RollingUpdate
  serverCnxnFactory: org.apache.zookeeper.server.NIOServerCnxnFactory
  ports:
    metrics: 8000
    client: 2181
    clientTls: 2281
    follower: 2888
    leaderElection: 3888
  # nodeSelector:
    # cloud.google.com/gke-nodepool: default-pool
  affinity:
    anti_affinity: true
    # Set the anti affinity type. Valid values:
    # requiredDuringSchedulingIgnoredDuringExecution - rules must be met for pod to be scheduled (hard) requires at least one node per replica
    # preferredDuringSchedulingIgnoredDuringExecution - scheduler will try to enforce but not guranentee
    type: preferredDuringSchedulingIgnoredDuringExecution
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
  securityContext: {}
  tolerations: []
  gracePeriod: 30
  resources:
    requests:
      memory: 256Mi
      cpu: 0.1
  volumes:
    # use a persistent volume or emptyDir
    persistence: true
    # Add a flag here for backward compatibility. Ideally we should
    # use two disks for production workloads. This flag might be
    # removed in the future releases to stick to two-disks mode.
    useSeparateDiskForTxlog: true
    data:
      name: data
      size: 50Gi
      local_storage: true
      storageClassName: "sn-default"
      dir: /pulsar/data/zookeeper
    dataLog:
      name: datalog
      size: 10Gi
      local_storage: true
      storageClassName: "sn-ssd"
      dir: /pulsar/data/zookeeper-datalog
  extraInitContainers: []
  ## Zookeeper configmap
  ## templates/zookeeper-configmap.yaml
  ##
  # The initial myid used for generating myid for each zookeeper pod.
  initialMyId: 0
  peerType: "participant"
  # reconfig settings
  reconfig:
    enabled: false
    # The zookeeper servers to observe/join
    zkServers: []
  # Automtically Roll Deployments when configmap is changed
  autoRollDeployment: true
  configData:
    PULSAR_MEM: >
      -Xms64m -Xmx128m
    PULSAR_GC: >
      -XX:+UseG1GC
      -XX:MaxGCPauseMillis=10
      -Dcom.sun.management.jmxremote
      -Djute.maxbuffer=10485760
      -XX:+ParallelRefProcEnabled
      -XX:+UnlockExperimentalVMOptions
      -XX:+AggressiveOpts
      -XX:+DoEscapeAnalysis
      -XX:+DisableExplicitGC
      -XX:+PerfDisableSharedMem
      -Dzookeeper.forceSync=no
  ## Zookeeper service
  ## templates/zookeeper-service.yaml
  ##
  service:
    annotations:
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  ## Zookeeper PodDisruptionBudget
  ## templates/zookeeper-pdb.yaml
  ##
  pdb:
    usePolicy: true
    maxUnavailable: 1
  operator:
    enabled: true
    adopt_existing: true
    updatePolicy: >
      - ""
  ## Retention Policy
  resourcePolicy:
    keep: false
  apiobjects:
    headlessService:
      name: "platform-pulsar-zookeeper"
    statefulSet:
      name: "platform-pulsar-zookeeper"
    configMap:
      name: "platform-pulsar-zookeeper"
    pdb:
      name: "platform-pulsar-zookeeper"

cluster: cluster
## Pulsar: Bookkeeper cluster
## templates/bookkeeper-statefulset.yaml
##
bookkeeper:
  # use a component name that matches your grafana configuration
  # so the metrics are correctly rendered in grafana dashboard
  component: bookie
  ## BookKeeper Cluster Initialize
  ## templates/bookkeeper-cluster-initialize.yaml
  zkServers: platform-pulsar-zookeeper:2181
  metadata:
    ## Set the resources used for running `bin/bookkeeper shell initnewcluster`
    ##
    resources:
      # requests:
        # memory: 4Gi
        # cpu: 2
  replicaCount: 3
  ports:
    http: 8000
    bookie: 3181
  # nodeSelector:
    # cloud.google.com/gke-nodepool: default-pool
  affinity:
    anti_affinity: true
    # Set the anti affinity type. Valid values:
    # requiredDuringSchedulingIgnoredDuringExecution - rules must be met for pod to be scheduled (hard) requires at least one node per replica
    # preferredDuringSchedulingIgnoredDuringExecution - scheduler will try to enforce but not guranentee
    type: preferredDuringSchedulingIgnoredDuringExecution
  annotations: {}
  securityContext: {}
  tolerations: []
  gracePeriod: 30
  resources:
    requests:
      memory: 512Mi
      cpu: 0.2
  volumes:
    # use a persistent volume or emptyDir
    persistence: true
    journal:
      name: journal
      size: 10Gi
      storageClassName: "sn-ssd"
    ledgers:
      name: ledgers
      size: 50Gi
      storageClassName: "sn-default"
  extraInitContainers: []
  ## Bookkeeper configmap
  ## templates/bookkeeper-configmap.yaml
  ##
  # Automtically Roll Deployments when configmap is changed
  autoRollDeployment: true
  placementPolicy:
    rackAware: true
  configData:
    # `BOOKIE_MEM` is used for `bookie shell`
    BOOKIE_MEM: >
      -Xms128m
      -Xmx256m
      -XX:MaxDirectMemorySize=256m
    # we use `bin/pulsar` for starting bookie daemons
    PULSAR_MEM: >
      -Xms128m
      -Xmx256m
      -XX:MaxDirectMemorySize=256m
    PULSAR_GC: >
      -XX:+UseG1GC
      -XX:MaxGCPauseMillis=10
      -XX:+ParallelRefProcEnabled
      -XX:+UnlockExperimentalVMOptions
      -XX:+AggressiveOpts
      -XX:+DoEscapeAnalysis
      -XX:ParallelGCThreads=4
      -XX:ConcGCThreads=4
      -XX:G1NewSizePercent=50
      -XX:+DisableExplicitGC
      -XX:-ResizePLAB
      -XX:+ExitOnOutOfMemoryError
      -XX:+PerfDisableSharedMem
      -XX:+PrintGCDetails
      -verbosegc
      -Xloggc:/var/log/bookie-gc.log

  operator:
    adopt_existing: false
    updatePolicy: >
      - finalizers
  ## Retention Policy
  resourcePolicy:
    keep: false

## Pulsar: Bookkeeper AutoRecovery
## templates/autorecovery-statefulset.yaml
##
autorecovery:
  # use a component name that matches your grafana configuration
  # so the metrics are correctly rendered in grafana dashboard
  component: recovery
  replicaCount: 1
  ports:
    http: 8000
  # nodeSelector:
    # cloud.google.com/gke-nodepool: default-pool
  affinity:
    anti_affinity: true
    # Set the anti affinity type. Valid values:
    # requiredDuringSchedulingIgnoredDuringExecution - rules must be met for pod to be scheduled (hard) requires at least one node per replica
    # preferredDuringSchedulingIgnoredDuringExecution - scheduler will try to enforce but not guranentee
    type: preferredDuringSchedulingIgnoredDuringExecution
  annotations: {}
  securityContext: {}
  # tolerations: []
  gracePeriod: 30
  resources:
    requests:
      memory: 64Mi
      cpu: 0.05
  extraInitContainers: []
  ## Bookkeeper auto-recovery configmap
  ## templates/autorecovery-configmap.yaml
  ##
  # Automtically Roll Deployments when configmap is changed
  autoRollDeployment: true
  configData:
    BOOKIE_MEM: >
      -Xms64m -Xmx64m
  ## Operator Controller
  ## templates/bookkeeper-cluster.yaml
  operator:
    enabled: true
    adopt_existing: false
    updatePolicy: []
  ## Retention Policy
  resourcePolicy:
    keep: false

## Pulsar Zookeeper metadata. The metadata will be deployed as
## soon as the last zookeeper node is reachable. The deployment
## of other components that depends on zookeeper, such as the
## bookkeeper nodes, broker nodes, etc will only start to be
## deployed when the zookeeper cluster is ready and with the
## metadata deployed
pulsar_metadata:
  component: pulsar-init
  image:
    # the image used for running `pulsar-cluster-initialize` job
    # repository: apachepulsar/pulsar-all
    # tag: 2.5.0
    repository: streamnative/sn-platform
    tag: "2.8.1.4"
    pullPolicy: IfNotPresent
  ## set an existing configuration store
  # configurationStore:
  configurationStoreMetadataPrefix: ""

  ## optional, you can provide your own zookeeper metadata store for other components
  # to use this, you should explicit set components.zookeeper to false
  #
  # userProvidedZookeepers: "zk01.example.com:2181,zk02.example.com:2181"

  # set the cluster name. if empty or not specified,
  # it will use helm release name to generate a cluster name.
  clusterName: ""

## Pulsar: KoP Protocol Handler
kop:
  ports:
    plaintext: 9092
    ssl: 9093

## Pulsar: Broker cluster
## templates/broker-statefulset.yaml
##
broker:
  # use a component name that matches your grafana configuration
  # so the metrics are correctly rendered in grafana dashboard
  component: broker
  replicaCount: 1
  zkServers: zk:2181
  ports:
    http: 8080
    https: 8443
    pulsar: 6650
    pulsarssl: 6651
  # nodeSelector:
    # cloud.google.com/gke-nodepool: default-pool
  affinity:
    anti_affinity: true
    # Set the anti affinity type. Valid values:
    # requiredDuringSchedulingIgnoredDuringExecution - rules must be met for pod to be scheduled (hard) requires at least one node per replica
    # preferredDuringSchedulingIgnoredDuringExecution - scheduler will try to enforce but not guranentee
    type: preferredDuringSchedulingIgnoredDuringExecution
  annotations: {}
  tolerations: []
  securityContext: {}
  gracePeriod: 30
  # flag to advertise pod ip address
  advertisedPodIP: false
  # For exposing kop service for external access
  advertisedDomain: ""
  dnsNames:
#    - my-pulsar-service-aop.example.com
#    - my-pulsar-service-mop.example.com
  kop:
    enabled: true
    tls:
      enabled: false
      # create a secret with keystore.jks and truststore.jks
      # certSecretName: "kop-secret"
      # same word for keystore and truststore
      # passwordSecretRef:
      #  key: password
      #  name: kop-keystore-password
  # choose istio selector
  aop:
    enabled: false
    proxyEnabled: false
  istio:
    gateway:
      selector:
        istio: "ingressgateway"
  functionmesh:
    enabled: true
  resources:
    requests:
      memory: 512Mi
      cpu: 0.2
  extraInitContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  ## Broker configmap
  ## templates/broker-configmap.yaml
  ##
  # Automtically Roll Deployments when configmap is changed
  autoRollDeployment: true
  configData:
    PULSAR_MEM: >
      -Xms128m -Xmx256m -XX:MaxDirectMemorySize=256m
    PULSAR_GC: >
      -XX:+UseG1GC
      -XX:MaxGCPauseMillis=10
      -Dio.netty.leakDetectionLevel=disabled
      -Dio.netty.recycler.linkCapacity=1024
      -XX:+ParallelRefProcEnabled
      -XX:+UnlockExperimentalVMOptions
      -XX:+AggressiveOpts
      -XX:+DoEscapeAnalysis
      -XX:ParallelGCThreads=4
      -XX:ConcGCThreads=4
      -XX:G1NewSizePercent=50
      -XX:+DisableExplicitGC
      -XX:-ResizePLAB
      -XX:+ExitOnOutOfMemoryError
      -XX:+PerfDisableSharedMem
    # @deprecated:
    # 1. You can use a service account to assume an IAM role to access S3 bucket
    # 2. You can use a k8s secret to reference AWS credentials. See `offload.s3.secret`
    # AWS_ACCESS_KEY_ID: "[YOUR AWS ACCESS KEY ID]"
    # AWS_SECRET_ACCESS_KEY: "[YOUR SECRET]"
    managedLedgerDefaultEnsembleSize: "3"
    managedLedgerDefaultWriteQuorum: "3"
    managedLedgerDefaultAckQuorum: "2"
    brokerDeleteInactiveTopicsEnabled: "false"
    clusterName: "pulsar"
  ## Broker service
  ## templates/broker-service.yaml
  ##
  service:
    annotations: {}
  ## Broker PodDisruptionBudget
  ## templates/broker-pdb.yaml
  ##
  pdb:
    usePolicy: true
    maxUnavailable: 1
  ### Broker service account
  ## templates/broker-service-account.yaml
  # deprecated: use `serviceAccount` section to configure service account.
  service_account:
    annotations: {}
  offload:
    enabled: false
    use: true
    managedLedgerOffloadDriver: aws-s3
    gcs:
      enabled: false
      gcsManagedLedgerOffloadRegion: "[YOUR REGION OF GCS]"
      gcsManagedLedgerOffloadBucket: "[YOUR BUCKET OF GCS]"
      gcsManagedLedgerOffloadMaxBlockSizeInBytes: "67108864"
      gcsManagedLedgerOffloadReadBufferSizeInBytes: "1048576"
    s3:
      enabled: false
      s3ManagedLedgerOffloadRegion: "[YOUR REGION OF S3]"
      s3ManagedLedgerOffloadBucket: "[YOUR BUCKET OF S3]"
      s3ManagedLedgerOffloadMaxBlockSizeInBytes: "67108864"
      s3ManagedLedgerOffloadReadBufferSizeInBytes: "1048576"
      s3ManagedLedgerOffloadServiceEndpoint: "http://s3.amazonaws.com"
      # secret that stores AWS credentials. The secret should be created in the following
      # format.
      # ```
      # kubectl -n pulsar create secret generic \
      #   --from-literal=AWS_ACCESS_KEY_ID=[AWS ACCESS KEY] \
      #   --from-literal=AWS_SECRET_ACCESS_KEY=[AWS SECRET KEY] \
      #   [secret name]
      # ```
      # secret: [k8s secret that stores AWS credentials]
   ## Operator Controller
  ## templates/broker-cluster.yaml
  operator:
    enabled: true
    adopt_existing: false
    updatePolicy: >
      - finalizers
  ## Retention Policy
  resourcePolicy:
    keep: false

proxy:
  # use a component name that matches your grafana configuration
  # so the metrics are correctly rendered in grafana dashboard
  component: proxy
  replicaCount: 1
  # nodeSelector:
    # cloud.google.com/gke-nodepool: default-pool
  affinity:
    anti_affinity: true
    # Set the anti affinity type. Valid values:
    # requiredDuringSchedulingIgnoredDuringExecution - rules must be met for pod to be scheduled (hard) requires at least one node per replica
    # preferredDuringSchedulingIgnoredDuringExecution - scheduler will try to enforce but not guranentee
    type: preferredDuringSchedulingIgnoredDuringExecution
  annotations: {}
  securityContext: {}
  tolerations: []
  gracePeriod: 30
  dnsNames:
  #    - my-pulsar-service-aop.example.com
  #    - my-pulsar-service-mop.example.com
  resources:
    requests:
      memory: 128Mi
      cpu: 0.2
  extraInitContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  websocket:
    component: websocket
    enabled: false
    configData:
      PULSAR_MEM: >
        -Xms64m -Xmx64m -XX:MaxDirectMemorySize=64m
      PULSAR_GC: >
        -XX:+UseG1GC
        -XX:MaxGCPauseMillis=10
        -Dio.netty.leakDetectionLevel=disabled
        -Dio.netty.recycler.linkCapacity=1024
        -XX:+ParallelRefProcEnabled
        -XX:+UnlockExperimentalVMOptions
        -XX:+AggressiveOpts
        -XX:+DoEscapeAnalysis
        -XX:ParallelGCThreads=4
        -XX:ConcGCThreads=4
        -XX:G1NewSizePercent=50
        -XX:+DisableExplicitGC
        -XX:-ResizePLAB
        -XX:+ExitOnOutOfMemoryError
        -XX:+PerfDisableSharedMem
  ## Proxy configmap
  ## templates/proxy-configmap.yaml
  ##
  # Automtically Roll Deployments when configmap is changed
  autoRollDeployment: true
  # Config proxy to point to an existing broker clusters
  brokerServiceURL: ""
  brokerWebServiceURL: ""
  brokerServiceURLTLS: ""
  brokerWebServiceURLTLS: ""
  configData:
    clusterName: "pulsar"
    PULSAR_MEM: >
      -Xms64m -Xmx64m -XX:MaxDirectMemorySize=64m
    PULSAR_GC: >
      -XX:+UseG1GC
      -XX:MaxGCPauseMillis=10
      -Dio.netty.leakDetectionLevel=disabled
      -Dio.netty.recycler.linkCapacity=1024
      -XX:+ParallelRefProcEnabled
      -XX:+UnlockExperimentalVMOptions
      -XX:+AggressiveOpts
      -XX:+DoEscapeAnalysis
      -XX:ParallelGCThreads=4
      -XX:ConcGCThreads=4
      -XX:G1NewSizePercent=50
      -XX:+DisableExplicitGC
      -XX:-ResizePLAB
      -XX:+ExitOnOutOfMemoryError
      -XX:+PerfDisableSharedMem
  ## Proxy service
  ## templates/proxy-service.yaml
  ##
  ports:
    http: 8080
    https: 443
    pulsar: 6650
    pulsarssl: 6651
    websocket: 9090
    websockettls: 9443
  service:
    annotations: {}
    type: ClusterIP
    extraSpec: {}
  ## Proxy PodDisruptionBudget
  ## templates/proxy-pdb.yaml
  ##
  pdb:
    usePolicy: true
    maxUnavailable: 1
  ## Operator Controller
  ## templates/broker-cluster.yaml
  operator:
    enabled: true
    adopt_existing: false
    updatePolicy: >
      - finalizers
  tlsSecretName: ""
  ## Retention Policy
  resourcePolicy:
    keep: false
